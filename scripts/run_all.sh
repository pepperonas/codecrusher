#!/bin/bash

# CodeCrusher - Run All Security Challenges
# F√ºhrt alle verf√ºgbaren Security-Tests automatisch aus

set -e

# Farbdefinitionen
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Banner
echo -e "${BLUE}"
echo "‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó    ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó "
echo "‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù    ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó"
echo "‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó      ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù"
echo "‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù      ‚ïö‚ïê‚ïê‚ïê‚ïê‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïù "
echo "‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó    ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë     "
echo "‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïù     "
echo "                                                                          "
echo "              üõ°Ô∏è  VOLLAUTOMATISIERUNG ALLER CHALLENGES  üõ°Ô∏è"
echo -e "${NC}"

# Parameter
TARGET_URL="${1:-http://localhost:3000}"
REPORT_FORMAT="${2:-html}"
MODE="${3:-all}"

echo -e "${YELLOW}‚öôÔ∏è  Konfiguration:${NC}"
echo "   üéØ Target: $TARGET_URL"
echo "   üìÑ Report: $REPORT_FORMAT"
echo "   üéÆ Mode: $MODE"
echo ""

# Pr√ºfe ob virtuelle Umgebung aktiv ist
if [[ "$VIRTUAL_ENV" == "" ]]; then
    echo -e "${YELLOW}‚ö†Ô∏è  Aktiviere virtuelle Umgebung...${NC}"
    source ../venv/bin/activate
fi

# Pr√ºfe Juice Shop Verbindung
echo -e "${BLUE}üîç Teste Verbindung zu Juice Shop...${NC}"
if curl -s "$TARGET_URL" > /dev/null 2>&1; then
    echo -e "${GREEN}‚úÖ Juice Shop erreichbar${NC}"
else
    echo -e "${RED}‚ùå Juice Shop nicht erreichbar. Starte Container...${NC}"
    
    # Versuche Juice Shop zu starten
    if command -v docker &> /dev/null; then
        docker run -d -p 3000:3000 --name juice-shop-auto bkimminich/juice-shop 2>/dev/null || \
        docker start juice-shop-auto 2>/dev/null || \
        echo -e "${RED}‚ùå Docker-Start fehlgeschlagen. Bitte manuell starten.${NC}"
        
        # Warte auf Start
        echo -e "${YELLOW}‚è≥ Warte auf Juice Shop...${NC}"
        for i in {1..30}; do
            if curl -s "$TARGET_URL" > /dev/null 2>&1; then
                echo -e "${GREEN}‚úÖ Juice Shop ist bereit!${NC}"
                break
            fi
            sleep 2
        done
    fi
fi

echo ""

# Wechsle in src Verzeichnis
cd ../src

# Erstelle Session-Name
SESSION_NAME="auto_$(date +%Y%m%d_%H%M%S)"

echo -e "${BLUE}üöÄ Starte Automation Framework...${NC}"
echo ""

# F√ºhre basierend auf Modus aus
case $MODE in
    "educational")
        echo -e "${YELLOW}üìö Educational Mode - Mit Erkl√§rungen${NC}"
        python main.py --target "$TARGET_URL" --educational --report "$REPORT_FORMAT" --verbose
        ;;
    "injection")
        echo -e "${YELLOW}üíâ Nur Injection Attacks${NC}"
        python main.py --target "$TARGET_URL" --category injection --report "$REPORT_FORMAT" --verbose
        ;;
    "auth")
        echo -e "${YELLOW}üîê Nur Authentication Attacks${NC}"
        python main.py --target "$TARGET_URL" --category authentication --report "$REPORT_FORMAT" --verbose
        ;;
    "fast")
        echo -e "${YELLOW}‚ö° Fast Mode - Nur kritische Exploits${NC}"
        python main.py --target "$TARGET_URL" --solve-all --report "$REPORT_FORMAT"
        ;;
    *)
        echo -e "${YELLOW}üéØ Full Automation - Alle Challenges${NC}"
        python main.py --target "$TARGET_URL" --solve-all --report "$REPORT_FORMAT" --verbose
        ;;
esac

# Ergebnis auswerten
EXIT_CODE=$?

echo ""
if [ $EXIT_CODE -eq 0 ]; then
    echo -e "${GREEN}üéâ Automation erfolgreich abgeschlossen!${NC}"
    
    # Zeige Berichte
    echo -e "${BLUE}üìä Generierte Berichte:${NC}"
    ls -la ../reports/ | tail -5
    
    # √ñffne HTML-Report falls vorhanden
    if [ "$REPORT_FORMAT" == "html" ] && [ -f "../reports/"*".html" ]; then
        LATEST_REPORT=$(ls -t ../reports/*.html | head -1)
        echo -e "${GREEN}üåê √ñffne Bericht: $LATEST_REPORT${NC}"
        
        # Versuche Browser zu √∂ffnen
        if command -v open &> /dev/null; then
            open "$LATEST_REPORT"
        elif command -v xdg-open &> /dev/null; then
            xdg-open "$LATEST_REPORT"
        elif command -v firefox &> /dev/null; then
            firefox "$LATEST_REPORT" &
        else
            echo "   √ñffne manuell: $LATEST_REPORT"
        fi
    fi
    
else
    echo -e "${RED}‚ùå Automation mit Fehlern beendet (Exit Code: $EXIT_CODE)${NC}"
fi

echo ""
echo -e "${BLUE}üìã N√ºtzliche Befehle:${NC}"
echo "   üìÑ Logs anzeigen: tail -f ../logs/*.log"
echo "   üîÑ Erneut ausf√ºhren: $0 $TARGET_URL $REPORT_FORMAT $MODE"
echo "   üßπ Cleanup: docker stop juice-shop-auto"
echo ""

echo -e "${RED}‚ö†Ô∏è  WICHTIGER HINWEIS:${NC}"
echo -e "${RED}   Diese Tools nur f√ºr autorisierte Security-Tests verwenden!${NC}"
echo -e "${RED}   Niemals gegen produktive Systeme ohne explizite Erlaubnis!${NC}"
echo ""

exit $EXIT_CODE